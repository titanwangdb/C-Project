using System;
using System.Collections.Generic;
using System.Text;

// 封装:“把一个或多个项目封闭在一个物理的或者逻辑的包中”。
// 在面向对象程序设计方法论中，封装是为了防止对实现细节的访问。
// 抽象和封装是面向对象程序设计的相关特性。抽象允许相关信息可视化，封装使程序员实现所需级别的抽象。

namespace TestProject.Packaged
{
    class PackagedTest
    {
        // 封装使用访问修饰符来实现。一个访问修饰符定义了一个类成员的范围和可见性。
        // Public
        // 允许一个类将其成员变和成员函数暴露给其他的函数和对象。任何公有成员可以被外部的类访问。

        // Private
        // 允许一个类将其成员变量和成员函数对其他的函数和对象进行隐藏。只有同一个类中的函数可以访问它的私有成员。
        // 即使是类的实例也不能访问它的私有成员。
        // 如果没有指定访问修饰符，则使用类成员的默认访问修饰符，即为 private。

        // Protected
        // 允许子类访问它的基类的成员变量和成员函数。这种方式有助于实现继承。

        // Internal
        // 允许一个类将其成员变量和成员函数暴露给当前程序中的其他函数和对象。
        // 带有 Internal 访问修饰符的任何成员可以被定义在该成员所定义的应用程序内的任何类或方法访问。

        // Protected internal
        // 允许一个类将其成员变量和成员函数对同一应用程内的子类以外的其他的类对象和函数进行隐藏。这也被用于实现继承。
    }
}
